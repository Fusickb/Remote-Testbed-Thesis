# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-07-14 22:38
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('experimenteditor', '0037_cancommand_is_extended_can'),
    ]

    operations = [
        migrations.CreateModel(
            name='CANGenCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay', models.DecimalField(decimal_places=6, help_text='Enter a number, in seconds, with up to 6 decimal places. 0 is the start of the experiment.', max_digits=11, verbose_name='Command Start Time')),
                ('interface', models.PositiveSmallIntegerField(choices=[(0, 'can0'), (1, 'can1')], default=0)),
                ('gap', models.PositiveIntegerField(blank=True, default=None, help_text='The gap between consecutive generated commands in ms.  If left blank, implies a 200ms gap.  The gap can be 0 ms to send each message ASAP.', null=True)),
                ('generate_extended_can', models.BooleanField(default=False)),
                ('send_rtr_frame', models.BooleanField(default=False)),
                ('message_length', models.CharField(blank=True, help_text='Valid values: 0-8, blank (random) or i, which sends CAN messages of length 1, then length 2, until it reaches length 8, then it goes back to length 1 and increases in the same fashion until this command stops.', max_length=1, null=True)),
                ('message_id', models.CharField(blank=True, help_text='Valid values: any 4-byte (8-character) hexidecimal message id.  No 0x prefix.  If left blank will be random.', max_length=8, null=True)),
                ('can_data', models.CharField(blank=True, help_text='Valid values: any 8-byte hexidecimal message, blank (random), or i, which sends messages of increasing value until it hits the maximum, then repeats until the command is over.', max_length=16, null=True)),
                ('number_of_can_frames_before_end', models.PositiveIntegerField(blank=True, help_text='Terminates after the specified number of sent/recieved CAN frames.  Leave blank for until the experiment ends.', null=True)),
                ('parent_experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experimenteditor.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
