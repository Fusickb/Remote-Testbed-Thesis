Views
=========

.. py:currentmodule:: experimenteditor.views

Note: All the views have LoginRequiredMixin in their class definitions so that non-authorized users get kicked out to the login page.

This whole section is a lot of repetitive code, so I will, instead of documenting every single view, group them together and describe their differences.   

TemplateViews
________________

The ``TemplateView`` s have the most variation amongst themselves, because viewing a template is such a generic action.  

.. py:class:: MyExperimentsView

	.. py:function:: MyExperimentsView.get_context_data()
	
	Returns a dictionary with one context variable: ``experiments``, which contains a QuerySet of :py:class:`experimenteditor.models.Experiment` objects that belong to the viewing user.

.. py:class:: EditExperimentView

	.. py:function:: get_context_data()
	
	Returns a dictionary with four context variables: ``experiment``, ``commands``, ``cancommands``, and ``cangencommands``.
	
	``experiment`` is the current experiment one is editing.
	
	``commands`` is a QuerySet of all the SSS commands (set speed, brake, end experiment, to name a few) tied to ``experiment``.  ``cancommands`` and ``cangencommands`` serve a similar purpose to ``commands``, but for the other two types of comands.

.. py:class:: DisplayResultsView
	
	This is the view that displays all the plots, if there are any.
	
	.. py:function:: get_context_data()
	
	Returns a dictionary with three context variables: ``experiment``, ``run``, and ``plots``.
	
	``experiment`` contains the current :py:class:`Experiment` , ``run`` contains the current :py:class:`RunResult` , and ``plots`` is a list of html strings that are generated by :py:func:`ObservableQuantity.gen_plot_html` .

.. py:class:: LogDownloadView

	This view allows users to download csv logs of their experiments.
	
	.. py:function:: get_context_data()
	
	See :py:class:`DisplayResultsView` for what ``experiment`` and ``run`` are.
	
	.. py:function:: render_to_response(context, **kwargs)

	Renders the log as a ``text/csv`` attachment from the current :py:class:`RunResult` object.  
	
CreateViews
_____________

The ``CreateView`` creates a model from user information through a form.

The :py:func:`CreateView.form_valid()` function is called when the user POSTs a valid form, and redirects to a success url.  You can override this implementation and call the superclass' :py:func:`form_valid` to alter the success url or shove in some view-only data.

.. py:class:: CreateExperimentView
	
	Creates an empty Experiment, given a title.
	
	.. py:function:: form_valid(form)
	
	Adds the current viewing user to the :py:class:`Experiment` instance and redirects back to the "My Experiments" page.

.. py:class:: DuplicateExperimentView

	Duplicates an experiment for easy editing while an experiment is running.
	
	.. py:function:: get_success_url()
	
	Returns the absolute url to the "My Experiments" page.  Used in the default :py:func:`form_valid` implementation.
	
.. py:class:: CreateCommandView

	Creates an SSS command.  The other two ``CreateView`` s that share this general format are :py:class:`CreateCanCommandView` and :py:class:`CreateCanGenCommandView` , which create models based on their names.
	
	.. py:function:: get_initial()
	
	Sets the initial form data.  ``parent_experiment`` is a hidden form field that associates the newly created command with an experiment.  
	
	.. py:function:: form_valid(form)
	
	This is another way to set the post-form success url, by setting the :py:attr:`self.success_url` attribute before calling the superclass' :py:func:`form_valid` .  The other two command ``CreateView`` s work similarly.
	
	.. py:function:: get_context_data()
	
	See :py:class:`DisplayResultsView` for what ``experiment`` is.  ``experiment`` is the only key in this dictionary besides ``form``, which has callable methods that can display the form and should never be touched.

.. py:class:: ScheduleExperimentFormView
	
	This class creates several things.  Its form takes two ``datetime`` s, and spits out the following, if there are no conflicts:
	
		1. An :py:class:`schedule.models.Event` object that contains the start and end times, and allows it to be displayed on the calendar.
	
		2. A :py:class:`experimenteditor.models.ExperimentSchedulingInfo` object that links the experiment to the event and contains any email reminder information, if applicable.
	
		3. A :py:class:`experimenteditor.models.RunResult` object that will eventually store the data/logs.
	
		4. A :py:class:`experimenteditor.models.ObservableQuantity` object that is associated with the scheduled :py:class:`Experiment` and newly created :py:class:`RunResult` for each checkbox the user has ticked on the "Visualize" page.
	
	It also starts a :py:func:`experimenteditor.tasks.send_experiment_json` task scheduled for 30 seconds before the event starts.  The source for this can be found in :file:`experimenteditor/forms.py` in the associated form's :py:func:`clean` and :py:func:`save` methods.
	
UpdateViews
_____________

``UpdateView`` s are very similar to ``CreateView`` s except that they have one extra method: :py:func:`get_object` that can be overridden and returns the object to be updated.  To find the object, it also has a :py:attr:`pk_url_kwarg` attribute that tells django which url parameter has the correct primary key of the model to be updated.

The :py:func:`get_context_data` method also has an extra context variable, ``object`` that contains the object to be edited.

.. py:class:: UpdateCommandView 

	Allows a user to edit a command.  :py:class:`UpdateCanCommandView` and :py:class:`UpdateCanGenCommandView` work the same way, except with their respective kind of command.
	
	See :py:class:`CreateCommandView` for more details on context variables and the like.
	
	.. py:function:: get_object 
	
	Gets the object from the url.  ``pk2`` is the url keyword argument for all three types of commands.
	
DeleteViews
________________

``DeleteView`` s are somewhat similar to ``UpdateView`` s in structure, but on success delete the model specified instead of updating its properties.

.. py:class:: DeleteCommandView

	Takes a user to a confirmation page, asking them if they want to delete the specified command.  If the user POSTs by pressing the confirm button, the command is wiped from the database.  Otherwise, if they hit cancel, they go back to the "Edit Experiment" page.
	
	All methods in this class are basically copy-pasted from :py:class:`CreateCommandView` and :py:class:`UpdateCanCommandView` , so see either if you're confused about how these work.

.. py:class:: ConfirmExperimentDeleteView

	Like :py:class:`DeleteCommandView`, but for :py:class:`experimenteditor.models.Experiment` objects.  Also deletes all commands tied to the experiment.
	
ListView(s)
_________________

The one ``ListView`` that exists is :py:class:`RunResultListView` , which is like an ``UpdateView`` , but it has a :py:func:`get_queryset` method that returns a queryset of models in a context variable called ``object_list``.

Also, nothing changes as a result of POSTing to the list view.  It just lists a bunch of models of the same type in whatever way you want.  

Feel free to rework the :py:class:`MyExperimentsView` as a ``ListView``, if you are so inclined.  

.. py:class:: RunResultListView

		.. py:function:: get_queryset
		
		Returns a queryset consiting of all the RunResult objects associated with the experiment pk in the url.  This is what each row in the table of the "View Results" page is.


		
	


	
	
	